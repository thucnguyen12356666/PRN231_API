@model IEnumerable<SCBS.Repositories.Models.Service>
@Html.AntiForgeryToken()

@{
    ViewData["Title"] = "Services";
}

<div class="container mt-4">
    <h2 class="mb-3 text-primary"><i class="bi bi-gear"></i> Manage Services</h2>
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-5">
                <input type="text" id="searchName" class="form-control mb-2" placeholder="Tìm theo tên dịch vụ">
            </div>
            <div class="col-md-5">
                <input type="text" id="searchDescription" class="form-control mb-2" placeholder="Tìm theo mô tả dịch vụ">
            </div>
            <div class="col-md-2">
                <button class="btn btn-primary w-100" id="searchButton">
                    <i class="bi bi-search"></i> Tìm kiếm
                </button>
            </div>
        </div>
    </div>

    <!-- Nút tạo mới -->
    <button type="button" class="btn btn-success mb-3" data-bs-toggle="modal" data-bs-target="#createModal">
        <i class="bi bi-plus-circle"></i> Add New Service
    </button>

    <!-- Modal: Create Service -->
    <div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="createModalLabel">Create New Service</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="createForm">
                        <div class="mb-3">
                            <label class="form-label fw-bold">Name</label>
                            <input type="text" class="form-control" id="name">
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">Description</label>
                            <textarea class="form-control" id="description"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">Price (VND)</label>
                                <input type="number" class="form-control" id="price">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">Duration (min)</label>
                                <input type="number" class="form-control" id="duration">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">Rating</label>
                                <input type="number" step="0.1" class="form-control" id="rating">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">Status</label>
                                <select class="form-select" id="status">
                                    <option value="available">Available</option>
                                    <option value="unavailable">Unavailable</option>
                                </select>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label fw-bold">User</label>
                            <select class="form-select" id="userId">
                                @foreach (var user in ViewData["Users"] as SelectList)
                                {
                                    <option value="@user.Value">@user.Text</option>
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveButton">Save</button>
                </div>
            </div>
        </div>
    </div>


    <!-- Table Services -->
    <div class="table-responsive">
        <table class="table table-hover table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price ($)</th>
                    <th>Duration</th>
                    <th>Rating</th>
                    <th>Status</th>
                    <th>Created At</th>
                    <th>Updated At</th>
                    <th>User</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Name)</td>
                        <td>@Html.DisplayFor(modelItem => item.Description)</td>
                        <td>@Html.DisplayFor(modelItem => item.Price)</td>
                        <td>@Html.DisplayFor(modelItem => item.Duration)</td>
                        <td>@Html.DisplayFor(modelItem => item.Rating)</td>
                        <td>
                            <span class="badge @(item.Status == "Available" ? "bg-success" : "bg-danger")">
                                @Html.DisplayFor(modelItem => item.Status)
                            </span>
                        </td>

                        <td>@Html.DisplayFor(modelItem => item.CreatedAt)</td>
                        <td>@Html.DisplayFor(modelItem => item.UpdatedAt)</td>
                        <td>@Html.DisplayFor(modelItem => item.User.Email)</td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm">
                                <i class="bi bi-pencil-square"></i>
                            </a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm text-white">
                                <i class="bi bi-eye"></i>
                            </a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm">
                                <i class="bi bi-trash"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Bootstrap CSS & Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
document.getElementById("saveButton").addEventListener("click", async function () {
    let serviceData = {
        name: document.getElementById("name").value,
        description: document.getElementById("description").value,
        price: parseFloat(document.getElementById("price").value),
        duration: parseInt(document.getElementById("duration").value),
        rating: parseFloat(document.getElementById("rating").value),
        status: document.getElementById("status").value,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        userId: document.getElementById("userId").value
    };

    // 🛠 Hàm lấy cookie chính xác, tránh lỗi chuỗi
    function getCookie(name) {
        let cookies = document.cookie.split("; ");
        for (let i = 0; i < cookies.length; i++) {
            let [cookieName, cookieValue] = cookies[i].split("=");
            if (cookieName === name) {
                return decodeURIComponent(cookieValue);
            }
        }
        return null;
    }

    let token = getCookie("TokenString"); // Lấy token từ cookie

    if (!token) {
        alert("Bạn chưa đăng nhập hoặc phiên đã hết hạn!");
        return;
    }

    let headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}` // 🛠 Đảm bảo token hợp lệ
    };

    try {
                let response = await fetch("https://localhost:7101/api/Service", {
            method: "POST",
            headers: headers,
            body: JSON.stringify(serviceData)
        });

        if (response.ok) {
            location.reload();
        } else {
            let responseText = await response.text();
            console.error("Lỗi phản hồi từ server:", responseText);
            alert("Tạo dịch vụ thất bại: " + responseText);
        }
    } catch (error) {
        console.error("Lỗi trong quá trình gửi request:", error);
        alert("Có lỗi xảy ra khi gửi request.");
    }
});
    document.getElementById("searchButton").addEventListener("click", async function () {
        let name = document.getElementById("searchName").value;
        let description = document.getElementById("searchDescription").value;

        // Tạo URL với tham số tìm kiếm
        let queryParams = new URLSearchParams();
        if (name) queryParams.append("name", name);
        if (description) queryParams.append("description", description);

        let apiUrl = `https://localhost:7101/api/Service/search?${queryParams.toString()}`;

        let token = getCookie("TokenString"); // 🛠 Hàm lấy token từ cookie

        let headers = {
            "Authorization": `Bearer ${token}`
        };

        try {
            let response = await fetch(apiUrl, {
                method: "GET",
                headers: headers
            });

            if (response.ok) {
                let services = await response.json();
                updateTable(services); // Cập nhật bảng với kết quả tìm kiếm
            } else {
                console.error("Lỗi phản hồi từ server:", await response.text());
                alert("Không tìm thấy kết quả!");
            }
        } catch (error) {
            console.error("Lỗi trong quá trình gửi request:", error);
            alert("Có lỗi xảy ra khi gửi request.");
        }
    });

    // 🛠 Hàm cập nhật bảng khi có kết quả tìm kiếm
    function updateTable(services) {
        let tbody = document.querySelector("tbody");
        tbody.innerHTML = ""; // Xóa dữ liệu cũ

        services.forEach(service => {
            let row = `
                <tr>
                    <td>${service.name}</td>
                    <td>${service.description}</td>
                    <td>${service.price}</td>
                    <td>${service.duration}</td>
                    <td>${service.rating}</td>
                    <td><span class="badge ${service.status === "Available" ? "bg-success" : "bg-danger"}">${service.status}</span></td>
                    <td>${service.createdAt}</td>
                    <td>${service.updatedAt}</td>
                    <td>${service.user ? service.user.email : "N/A"}</td>
                    <td>
                        <a href="/Service/Edit/${service.id}" class="btn btn-warning btn-sm">
                            <i class="bi bi-pencil-square"></i>
                        </a>
                        <a href="/Service/Details/${service.id}" class="btn btn-info btn-sm text-white">
                            <i class="bi bi-eye"></i>
                        </a>
                        <a href="/Service/Delete/${service.id}" class="btn btn-danger btn-sm">
                            <i class="bi bi-trash"></i>
                        </a>
                    </td>
                </tr>
            `;
            tbody.innerHTML += row;
        });
    }

</script>

